const rules = {
  // eslint-disable-next-line import/no-extraneous-dependencies
  ...Object.keys(require('eslint-plugin-jsx-a11y').rules).reduce(
    (acc, rule) => {
      acc[`jsx-a11y/${rule}`] = 'off'
      return acc
    },
    {}
  ),
  '@typescript-eslint/naming-convention': 'off',
  'arrow-body-style': 'off',
  'arrow-parens': ['error', 'always', { requireForBlockBody: false }], // as-needed | always
  'camelcase': 'off', // prettier-ignore
  'class-methods-use-this': 'off',
  'comma-dangle': ['error', { arrays: 'always-multiline', objects: 'always-multiline', imports: 'always-multiline', exports: 'always-multiline', functions: 'never' }], // prettier-ignore
  'consistent-return': 'warn',
  'constructor-super': 'error',
  'default-param-last': 'off',
  'func-names': 'off',
  'getter-return': ['error', { allowImplicit: true }],
  'global-require': 'off',
  'import/default': 'off',
  'import/namespace': ['warn', { allowComputed: true }],
  'import/no-dynamic-require': 'off',
  'import/no-mutable-exports': 'warn',
  'import/no-named-as-default-member': 'off',
  'import/no-named-as-default': 'off',
  'import/no-useless-path-segments': 'warn',
  'import/prefer-default-export': 'off',
  'indent': 'off', // prettier-ignore
  'lines-between-class-members': 'off',
  'max-classes-per-file': 'off',
  'no-confusing-arrow': 'off',
  'no-console': 'warn',
  'no-const-assign': 'error',
  'no-continue': 'off',
  'no-dupe-args': 'error',
  'no-dupe-keys': 'error',
  'no-extra-boolean-cast': 'off',
  'no-func-assign': 'error',
  'no-import-assign': 'warn',
  'no-nested-ternary': 'off',
  'no-new-symbol': 'error',
  'no-obj-calls': 'error',
  'no-param-reassign': 'off',
  'no-plusplus': 'off',
  'no-promise-executor-return': 'warn',
  'no-restricted-syntax': 'off',
  'no-return-assign': 'off',
  'no-return-await': 'off',
  'no-script-url': 'off',
  'no-sequences': 'off',
  'no-setter-return': 'error',
  'no-shadow': 'off',
  'no-this-before-super': 'error',
  'no-undef': 'error',
  'no-underscore-dangle': 'off',
  'no-unreachable': 'error',
  'no-unsafe-negation': 'error',
  'no-unsafe-optional-chaining': 'warn',
  'no-unused-vars': ['warn', { argsIgnorePattern: '^_', varsIgnorePattern: '(^_|^React$)' }], // prettier-ignore
  'no-use-before-define': 'error',
  'no-useless-escape': 'warn',
  'prefer-arrow-callback': 'warn',
  'prefer-destructuring': 'warn',
  'react-hooks/exhaustive-deps': 'warn',
  'react-hooks/rules-of-hooks': 'error',
  'react-native/no-inline-styles': 'off',
  'react/destructuring-assignment': 'off',
  'react/forbid-prop-types': 'off',
  'react/function-component-definition': 'off',
  'react/jsx-curly-brace-presence': 'off',
  'react/jsx-filename-extension': 'off',
  'react/jsx-fragments': 'warn',
  'react/jsx-indent': 'off',
  'react/jsx-no-script-url': 'warn',
  'react/jsx-no-useless-fragment': 'warn',
  'react/jsx-props-no-spreading': 'off',
  'react/jsx-uses-react': 'off',
  'react/no-array-index-key': 'warn',
  'react/no-did-update-set-state': 'off',
  'react/no-unescaped-entities': 'off',
  'react/no-unused-class-component-methods': 'off',
  'react/no-unused-state': 'off',
  'react/prefer-stateless-function': 'off',
  'react/prop-types': 'off',
  'react/react-in-jsx-scope': 'off',
  'react/require-default-props': 'off',
  'react/sort-comp': 'off',
  'react/state-in-constructor': 'off',
  'react/static-property-placement': 'warn',
  'require-yield': 'off',
  'semi': ['error', 'never'], // prettier-ignore
  'spaced-comment': 'off',
  'strict': 'off', // prettier-ignore
}

const env = {
  browser: false,
  commonjs: true,
  es6: true,
  jest: true,
  'jest/globals': true,
  node: true,
}

module.exports = {
  root: true,
  overrides: [
    {
      files: '**/*.+(ts|tsx)',
      parser: '@typescript-eslint/parser',
      parserOptions: {
        tsconfigRootDir: __dirname,
        project: ['./tsconfig.json'],
      },
      extends: [
        'airbnb',
        'airbnb-typescript',
        '@react-native',
        'eslint:recommended',
        'plugin:@typescript-eslint/eslint-recommended',
        'plugin:@typescript-eslint/recommended',
        'plugin:import/recommended',
      ],
      plugins: ['@typescript-eslint', 'import'],
      env,
      rules: {
        ...rules,
        'no-unused-vars': 'off',
        '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_', varsIgnorePattern: '(^_|^React$)' }], // prettier-ignore
        'no-use-before-define': 'off',
        '@typescript-eslint/no-use-before-define': 'error',
        '@typescript-eslint/semi': 'off',
        '@typescript-eslint/ban-types': 'off',
        '@typescript-eslint/no-shadow': 'off',
      },
    },
    {
      files: '**/*.+(js|jsx)',
      parser: '@babel/eslint-parser',
      parserOptions: {
        tsconfigRootDir: __dirname,
        project: ['./tsconfig.json'],
      },
      extends: [
        'airbnb',
        '@react-native',
        'eslint:recommended',
        'plugin:import/recommended',
      ],
      plugins: ['import'],
      env,
      rules: {
        ...rules,
        'import/extensions': [
          'error',
          'ignorePackages',
          {
            js: 'never',
            jsx: 'never',
            ts: 'never',
            tsx: 'never',
          },
        ],
      },
    },
  ],
  settings: {
    'import/ignore': ['node_modules/react-native/index\\.js$'],
    'import/resolver': {
      workspaces: {
        extensions: ['.mjs', '.js', '.ts', '.tsx', '.json'],
        sources: {
          '@tellonym/core/*': ['./packages/core/src/*'],
          '@tellonym/strings/*': ['./packages/strings/*'],
        },
      },
    },
  },
  ignorePatterns: [
    '**/.bundle',
    '**/.classpath',
    '**/.factorypath',
    '**/.project',
    '**/.settings',
    '**/.yarn',
    '**/*.cjs',
    '**/*.d.ts',
    '**/*.map',
    '**/*.min.js',
    '**/build',
    '**/dist',
    '**/node_modules',
    '**/Pods',
    '**/vendor/bundle',
    'packages/strings/scripts',
    '.prettierrc.js',
    'babel.config.js',
    'changelog.config.js',
    'commitlint.config.js',
    'commitlint.shared.js',
    'jest.config.js',
    'metro.config.js',
  ],
  globals: [
    '__DEBUG__',
    '__HERMES__',
    '__INTERNAL__',
    '__PROFILING__',
    '__PROFILING__BABEL_PLUGIN',
    'ANDROID',
    'APP_LANGUAGE',
    'APP_LANGUAGES',
    'APP_VERSION',
    'BRAND',
    'BUILD_NUMBER',
    'COUNTRY',
    'DEVICE_ID',
    'DEVICE_NAME',
    'EMULATOR',
    'HUAWEI',
    'IAP',
    'IOS',
    'LANGUAGE_CODE',
    'LANGUAGE_TAG',
    'LARGE_DEVICE',
    'LARGE_DEVICE_WIDTH',
    'MANUFACTURER',
    'MODEL',
    'OS',
    'PLAY_SERVICES',
    'PLATFORM_CONSTANTS',
    'PLATFORM_VERSION',
    'SMALL_DEVICE',
    'SMALL_DEVICE_WIDTH',
    'SYSTEM_NAME',
    'SYSTEM_VERSION',
    'TIMEZONE',
    'UNIQUE_ID',
    'WEB_LANGUAGE',
    'WEB_LANGUAGES',
  ].reduce(
    (acc, global) => ({
      ...acc,
      [global]: true,
    }),
    {}
  ),
}
